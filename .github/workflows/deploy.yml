--api-username="${{ secrets.BOT_MASTER_RW_GITHUB_USERNAME }}"
            --token="${{ secrets.BOT_MASTER_RW_GITHUB_TOKEN }}"
            --owner=${{ github.repository_owner }}
            --repo="AnySoftKeyboard"
            --environment="${{ github.event.deployment.environment }}"
            --sha="${{ github.event.deployment.sha }}"
      - name: status-failure
        if: failure()
        run: |
          bazel run //js/github_deployments -- status \
            --api-username="${{ secrets.BOT_MASTER_RW_GITHUB_USERNAME }}"
            --token="${{ secrets.BOT_MASTER_RW_GITHUB_TOKEN }}"
            --owner=${{ github.repository_owner }}
            --repo="AnySoftKeyboard"
            --environment="${{ github.event.deployment.environment }}"
            --deployment-id="${{ github.event.deployment.id }}"
            --state=failure
      - uses: actions/upload-artifact@v4.6.2
        if: always()
        continue-on-error: true
        with:
          name: deploy-logging
          path: build/build-logging
      - uses: actions/upload-artifact@v4.6.2
        if: always()
        continue-on-error: true
        with:
          name: bundles
          path: outputs/bundle
      - uses: actions/upload-artifact@v4.6.2
        if: always()
        continue-on-error: true
        with:
          name: apks
          path: outputs/apk
      - uses: actions/upload-artifact@v4.6.2
        if: always()
        continue-on-error: true
        with:
          name: proguard-mapping
          path: ime/app/build/outputs/mapping
      - uses: actions/upload-artifact@v4.6.2
        continue-on-error: true
        if: always()
        with:
          name: fdroid-metadata
          path: outputs/fdroid

  create_github_release:
    name: Create GitHub Release
    needs: deploy
    runs-on: ubuntu-24.04
    if: success() && needs.deploy.outputs.deployment_environment == 'imeProduction_production_010'
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/download-artifact@v4
        with:
          name: apks
          path: apks
      - uses: actions/download-artifact@v4
        with:
          name: bundles
          path: bundles
      - uses: actions/download-artifact@v4
        with:
          name: proguard-mapping
          path: proguard-mapping
      - name: "Derive tag and version from branch"
        run: |
          VERSION_WITH_V=$(echo "${{ github.event.deployment.ref }}" | sed 's/release-branch-ime-//')
          echo "VERSION_WITH_V=${VERSION_WITH_V}" >> $GITHUB_ENV
          TAG_NAME=$(echo "${VERSION_WITH_V}" | sed 's/^v//')
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
      - name: "Delete prior release and tag"
        env:
          GH_TOKEN: ${{ secrets.BOT_MASTER_RW_GITHUB_TOKEN }}
        run: |
          gh release delete ${{ env.TAG_NAME }} --cleanup-tag --yes || true
      - uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.BOT_MASTER_RW_GITHUB_TOKEN }}
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.VERSION_WITH_V }}
          body_path: ime/app/src/main/play/release-notes/en-US/alpha.txt
          prerelease: true
          files: |
            apks/*.apk
            bundles/*.aab
            proguard-mapping/**/*.txt
