name: AnySoftKeyboard

on:
  push:
    branches:
      - master
      - release-branch-v*
  pull_request:
    branches:
      - '*'
    paths-ignore:
      - '**.md'

jobs:
  checks:
    runs-on: ubuntu-18.04
    container: menny/ndk_ask:1.13.1
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: setup
      env:
        TERM: dumb
        GRADLE_OPTS: "-Dorg.gradle.daemon=false"
      run: |
        echo "ENV:"
        printenv
        echo "******"
        echo "Event: "
        cat ${GITHUB_EVENT_PATH}
        echo "***"
        ./scripts/ci/ci_setup.sh
        
    - name: check
      env:
        TERM: dumb
        GRADLE_OPTS: "-Dorg.gradle.daemon=false"
      run: ./scripts/ci/ci_check.sh
    - uses: actions/upload-artifact@v1.0.0
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
    - name: artifacts
      if: always()
      run: |
        rm -rf all-checks-reports || true
        mkdir all-checks-reports || true

        find . -path ./all-checks-reports -prune -o -name "pmd*.html" -exec mkdir -p all-checks-reports/{} \; -exec cp {} all-checks-reports/{}/report.html \;
        find . -path ./all-checks-reports -prune -o -name "checkstyle*.html" -exec mkdir -p all-checks-reports/{} \; -exec cp {} all-checks-reports/{}/report.html \;
        find . -path ./all-checks-reports -prune -o -name "lint-results-*.html" -exec mkdir -p all-checks-reports/{} \; -exec cp {} all-checks-reports/{}/report.html \;
    - uses: actions/upload-artifact@v1.0.0
      if: always()
      with:
        name: checks-reports
        path: all-checks-reports/

  heavy-tests:
    runs-on: ubuntu-18.04
    container: menny/ndk_ask:1.13.1
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: setup
        env:
          TERM: dumb
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"
        run: ./scripts/ci/ci_setup.sh
      - name: tests
        env:
          TERM: dumb
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"
        run: |
          ./gradlew --stacktrace :app:testDebugUnitTest --tests="*AllSdkTest*" :app:testDebugUnitTestCoverage
      - name: codecov
        env:
          TERM: dumb
          CODECOV_TOKEN: 1a4cd171-2784-4f48-8a62-0b7ec31e6d7e
        run: |
          curl https://codecov.io/bash -o codecov.sh
          chmod +x codecov.sh
          ./codecov.sh -X gcov -X coveragepy -X xcode `find . -name "test*UnitTestCoverage.xml" | xargs -n 1 echo -n " -f "`
      - name: artifacts
        if: always()
        run: |
          rm -rf all-test-reports || true
          mkdir all-test-reports || true
          find . -path ./all-test-reports -prune -o -name "TEST-*.xml" -exec cp {} all-test-reports/ \;
      - uses: actions/upload-artifact@v1.0.0
        if: always()
        with:
          name: heavy-tests
          path: all-test-reports/

  app-normal-tests_1:
    runs-on: ubuntu-18.04
    container: menny/ndk_ask:1.13.1
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: setup
        env:
          TERM: dumb
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"
        run: ./scripts/ci/ci_setup.sh
      - name: tests
        env:
          TERM: dumb
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"
          TEST_GROUP_INDEX: 0
          TEST_GROUPS_COUNT: 2
        run: |
          ./gradlew --stacktrace app:testDebugUnitTest app:testDebugUnitTestCoverage -PexcludeTestClasses="**/*AllSdkTest*"
      - name: codecov
        env:
          TERM: dumb
          CODECOV_TOKEN: 1a4cd171-2784-4f48-8a62-0b7ec31e6d7e
        run: |
          curl https://codecov.io/bash -o codecov.sh
          chmod +x codecov.sh
          ./codecov.sh -X gcov -X coveragepy -X xcode `find . -name "test*UnitTestCoverage.xml" | xargs -n 1 echo -n " -f "`
      - name: artifacts
        if: always()
        run: |
          rm -rf all-test-reports || true
          mkdir all-test-reports || true
          find . -path ./all-test-reports -prune -o -name "TEST-*.xml" -exec cp {} all-test-reports/ \;
      - uses: actions/upload-artifact@v1.0.0
        if: always()
        with:
          name: app-normal-tests_1
          path: all-test-reports/

  app-normal-tests_2:
    runs-on: ubuntu-18.04
    container: menny/ndk_ask:1.13.1
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: setup
        env:
          TERM: dumb
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"
        run: ./scripts/ci/ci_setup.sh
      - name: tests
        env:
          TERM: dumb
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"
          TEST_GROUP_INDEX: 1
          TEST_GROUPS_COUNT: 2
        run: |
          ./gradlew --stacktrace app:testDebugUnitTest app:testDebugUnitTestCoverage -PexcludeTestClasses="**/*AllSdkTest*"
      - name: codecov
        env:
          TERM: dumb
          CODECOV_TOKEN: 1a4cd171-2784-4f48-8a62-0b7ec31e6d7e
        run: |
          curl https://codecov.io/bash -o codecov.sh
          chmod +x codecov.sh
          ./codecov.sh -X gcov -X coveragepy -X xcode `find . -name "test*UnitTestCoverage.xml" | xargs -n 1 echo -n " -f "`
          find . -path ./all-test-reports -prune -o -name "TEST-*.xml" -exec cp {} all-test-reports/ \;
      - name: artifacts
        if: always()
        run: |
          rm -rf all-test-reports || true
          mkdir all-test-reports || true
          find . -path ./all-test-reports -prune -o -name "TEST-*.xml" -exec cp {} all-test-reports/ \;
      - uses: actions/upload-artifact@v1.0.0
        if: always()
        with:
          name: app-normal-tests_2
          path: all-test-reports/

  non-app-normal-tests:
    runs-on: ubuntu-18.04
    container: menny/ndk_ask:1.13.1
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: setup
        env:
          TERM: dumb
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"
        run: ./scripts/ci/ci_setup.sh
      - name: tests
        env:
          TERM: dumb
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"
        run: |
          ./gradlew --stacktrace testDebugUnitTest testDebugUnitTestCoverage -x app:testDebugUnitTest -x app:testDebugUnitTestCoverage
      - name: codecov
        env:
          TERM: dumb
          CODECOV_TOKEN: 1a4cd171-2784-4f48-8a62-0b7ec31e6d7e
        run: |
          curl https://codecov.io/bash -o codecov.sh
          chmod +x codecov.sh
          ./codecov.sh -X gcov -X coveragepy -X xcode `find . -name "test*UnitTestCoverage.xml" | xargs -n 1 echo -n " -f "`
          find . -path ./all-test-reports -prune -o -name "TEST-*.xml" -exec cp {} all-test-reports/ \;
      - name: artifacts
        if: always()
        run: |
          rm -rf all-test-reports || true
          mkdir all-test-reports || true
          find . -path ./all-test-reports -prune -o -name "TEST-*.xml" -exec cp {} all-test-reports/ \;
      - uses: actions/upload-artifact@v1.0.0
        if: always()
        with:
          name: non-app-normal-tests
          path: all-test-reports/

  pr_audit:
    if: github.event_name == 'pull_request'
    needs: [checks, app-normal-tests_1, app-normal-tests_2, heavy-tests, non-app-normal-tests]
    runs-on: ubuntu-18.04
    steps:
      - name: Success Message
        run: echo "Thank you, ${GITHUB_ACTOR}. ${GITHUB_WORKFLOW} ${GITHUB_EVENT_NAME} verification of ref ${GITHUB_REF} finished successfully!"

  deploy:
    if: github.event_name == 'push'
    needs: [checks, app-normal-tests_1, app-normal-tests_2, heavy-tests, non-app-normal-tests]
    runs-on: ubuntu-18.04
    container: menny/ndk_ask:1.13.1
    steps:
      - uses: actions/checkout@v1
      - name: setup
        env:
          TERM: dumb
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"
        run: ./scripts/ci/ci_setup.sh
      - name: deploy
        env:
          TERM: dumb
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"
          RELEASE_BUILD: ${{ contains(github.ref, 'release-branch-v') }}
          KEYSTORE_FILE_URL: ${{ secrets.KEYSTORE_FILE_URL }}
          PUBLISH_CERT_FILE_URL: ${{ secrets.PUBLISH_CERT_FILE_URL }}
          ANYSOFTKEYBOARD_CRASH_REPORT_EMAIL: ${{ secrets.ANYSOFTKEYBOARD_CRASH_REPORT_EMAIL }}
          ANYSOFTKEYBOARD_KEYSTORE_ALIAS: ${{ secrets.ANYSOFTKEYBOARD_KEYSTORE_ALIAS }}
          ANYSOFTKEYBOARD_KEYSTORE_KEY_PASSWORD: ${{ secrets.ANYSOFTKEYBOARD_KEYSTORE_KEY_PASSWORD }}
          ANYSOFTKEYBOARD_KEYSTORE_PASSWORD: ${{ secrets.ANYSOFTKEYBOARD_KEYSTORE_PASSWORD }}
          PUBLISH_APK_SERVICE_ACCOUNT_EMAIL: ${{ secrets.PUBLISH_APK_SERVICE_ACCOUNT_EMAIL }}
        run: |
          echo "This will deploy"
          export BUILD_COUNT_FOR_VERSION=$( git rev-list --count ${GITHUB_REF} -- )
          export BUILD_TYPE="canary"
          if [[ "${RELEASE_BUILD}" == "true" ]] then BUILD_TYPE="release" fi
          echo "Counter is ${BUILD_COUNT_FOR_VERSION}, build-type: ${BUILD_TYPE}, RELEASE_BUILD: ${RELEASE_BUILD}, and crash email: ${ANYSOFTKEYBOARD_CRASH_REPORT_EMAIL}"
