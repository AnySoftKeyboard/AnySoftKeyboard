---
name: checks

on:
  push:
    paths-ignore:
      - deployment/halt_deployment_marker
    branches:
      - main
      - release-branch-*
  pull_request:
    paths-ignore:
      - deployment/halt_deployment_marker
    branches:
      - '*'

env:
  TERM: dumb
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GRADLE_USER_HOME: ".github_cache_gradle/user_home/"
  GRADLE_HOME: ".github_cache_gradle/gradle_home/"
  TMPDIR: "/tmp"

jobs:
  js-checks:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
      - run: npm clean-install
      - run: npm run lint
      - run: npm run pretty-check

  static-checks:
    runs-on: ubuntu-22.04
    container: ghcr.io/menny/android_ndk:1.19.0
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: actions/cache@v3.0.11
        with:
          path: .github_cache_gradle/
          key: global-gradle-v8-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
      - name: setup
        run: ./scripts/ci/ci_setup.sh
      - name: check
        run: ./scripts/ci/ci_check.sh
      - name: check-all-yamls
        run: ./scripts/ci/ci_check_yamls.sh
      - name: verify-version-classes-greps
        run: ./scripts/ci/third-party-update/verify-third-party-update-greps.sh
      - name: fix-fs
        if: always()
        run: ./scripts/ci/ci_fix_fs.sh
      - uses: ./.github/actions/collect-reports
        if: always()
        with:
          file_pattern: checkstyle*.html
          output_folder: collected_reports/checkstyle
      - uses: actions/upload-artifact@v3.1.1
        if: always()
        continue-on-error: true
        with:
          name: checks-reports
          path: collected_reports

  linters:
    runs-on: ubuntu-22.04
    container: ghcr.io/menny/android_ndk:1.19.0
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: actions/cache@v3.0.11
        with:
          path: .github_cache_gradle/
          key: global-gradle-v8-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
      - name: setup
        run: ./scripts/ci/ci_setup.sh
      - name: check
        run: ./scripts/ci/ci_check_lint.sh
      - name: check-oom-due-to-lint-issue
        if: always()
        continue-on-error: true
        run: |
          echo "repo ls:"
          ls -al
          echo "logs ls:"
          ls /var/log
          grep -i 'killed process' /var/log/messages || true
          grep -i 'killed process' /var/log/syslog || true
          grep -i 'oom' /var/log/messages || true
          grep -i 'oom' /var/log/syslog || true
          grep -i 'out of memory' /var/log/messages || true
          grep -i 'out of memory' /var/log/syslog || true
      - name: fix-fs
        if: always()
        run: ./scripts/ci/ci_fix_fs.sh
      - uses: ./.github/actions/collect-reports
        if: always()
        with:
          file_pattern: lint-results-*.html
          output_folder: collected_reports/lint
      - uses: ./.github/actions/collect-reports
        if: always()
        with:
          file_pattern: java_*.hprof
          output_folder: oom_dumps
      - uses: actions/upload-artifact@v3.1.1
        if: always()
        continue-on-error: true
        with:
          name: linters-reports
          path: collected_reports

  app-tests-shards:
    runs-on: ubuntu-22.04
    container: ghcr.io/menny/android_ndk:1.19.0
    timeout-minutes: 15
    strategy:
      matrix:
        index: [0, 1]
        groups_count: [2]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: actions/cache@v3.0.11
        with:
          path: .github_cache_gradle/
          key: global-gradle-v8-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
      - name: setup
        run: ./scripts/ci/ci_setup.sh
      - name: tests
        uses: ./.github/actions/test-shard-run
        with:
          index: ${{ matrix.index }}
          groups_count: ${{ matrix.groups_count }}
          module: ":ime:app:"
          extra_args: "-PexcludeTestClasses=\"**/*AllSdkTest*\""
      - uses: ./.github/actions/codecov
      - name: fix-fs
        if: always()
        run: ./scripts/ci/ci_fix_fs.sh
      - uses: ./.github/actions/collect-reports
        if: always()
        with:
          file_pattern: "**/build/reports/tests/**"
      - uses: actions/upload-artifact@v3.1.1
        if: always()
        continue-on-error: true
        with:
          name: app-tests-${{ matrix.index }}
          path: collected_reports
      - uses: actions/upload-artifact@v3.1.1
        if: always()
        continue-on-error: true
        with:
          name: app-tests-${{ matrix.index }}-build-logging
          path: build/build-logging

  app-all-sdks-tests:
    runs-on: ubuntu-22.04
    container: ghcr.io/menny/android_ndk:1.19.0
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: actions/cache@v3.0.11
        with:
          path: .github_cache_gradle/
          key: global-gradle-v8-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
      - name: setup
        run: ./scripts/ci/ci_setup.sh
      - name: tests
        uses: ./.github/actions/test-shard-run
        with:
          index: 0
          groups_count: 1
          module: ":ime:app:"
          extra_args: "--tests=*AllSdkTest*"
      - uses: ./.github/actions/codecov
      - name: fix-fs
        if: always()
        run: ./scripts/ci/ci_fix_fs.sh
      - uses: ./.github/actions/collect-reports
        if: always()
        with:
          file_pattern: "**/build/reports/tests/**"
      - uses: actions/upload-artifact@v3.1.1
        if: always()
        continue-on-error: true
        with:
          name: app-less-tests
          path: collected_reports
      - uses: actions/upload-artifact@v3.1.1
        if: always()
        continue-on-error: true
        with:
          name: app-all-sdks-tests-build-logging
          path: build/build-logging

  app-less-tests:
    runs-on: ubuntu-22.04
    container: ghcr.io/menny/android_ndk:1.19.0
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: actions/cache@v3.0.11
        with:
          path: .github_cache_gradle/
          key: global-gradle-v8-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
      - name: setup
        run: ./scripts/ci/ci_setup.sh
      - name: tests
        uses: ./.github/actions/test-shard-run
        with:
          index: 0
          groups_count: 1
          module: ""
          extra_args: "-x :ime:app:testDebugUnitTest -x :ime:app:testDebugUnitTestCoverage"
      - uses: ./.github/actions/codecov
      - name: fix-fs
        if: always()
        run: ./scripts/ci/ci_fix_fs.sh
      - uses: ./.github/actions/collect-reports
        if: always()
        with:
          file_pattern: "**/build/reports/tests/**"
      - uses: actions/upload-artifact@v3.1.1
        if: always()
        continue-on-error: true
        with:
          name: app-less-tests
          path: collected_reports
      - uses: actions/upload-artifact@v3.1.1
        if: always()
        continue-on-error: true
        with:
          name: app-less-tests-build-logging
          path: build/build-logging

  verify-all-addons:
    runs-on: ubuntu-22.04
    container: ghcr.io/menny/android_ndk:1.19.0
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: actions/cache@v3.0.11
        with:
          path: .github_cache_gradle/
          key: global-gradle-v8-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
      - name: setup
        run: ./scripts/ci/ci_setup.sh
      - name: verify-add-ons
        run: |
          ./scripts/download_robolectric_jars_to_machine.sh
          ./gradlew :ime:app:testAllAddOnsUnitTestCoverage :ime:app:testAllAddOnsUnitTest --tests="*LoadedKeyboardsVerificationTest*"
          chmod -R a+rwx .
      - uses: ./.github/actions/codecov
      - name: fix-fs
        if: always()
        run: ./scripts/ci/ci_fix_fs.sh
      - uses: ./.github/actions/collect-reports
        if: always()
        with:
          file_pattern: "**/build/reports/tests/**"
      - uses: actions/upload-artifact@v3.1.1
        if: always()
        continue-on-error: true
        with:
          name: verify-all-addons
          path: collected_reports
      - uses: actions/upload-artifact@v3.1.1
        if: always()
        continue-on-error: true
        with:
          name: verify-all-addons-build-logging
          path: build/build-logging

  deploy-dry-run:
    runs-on: ubuntu-22.04
    container: ghcr.io/menny/android_ndk:1.19.0
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: actions/cache@v3.0.11
        with:
          path: .github_cache_gradle/
          key: global-gradle-v8-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
      - name: setup
        run: ./scripts/ci/ci_setup.sh
      - name: dry-run-release-build
        run: |
          mkdir -p /root/.android/ || true
          cp ./.github/actions/deploy/debug.keystore /root/.android/ || exit 1
          ./gradlew -PwithAutoVersioning -DdeployChannel=production -PonlyPublishSupporting=production \
              assembleRelease assembleCanary \
              bundleRelease bundleCanary \
              signDebugBundle \
              verifyReleaseResources \
              generateReleasePlayResources generateCanaryPlayResources
          chmod -R a+rwx .
      - name: fix-fs
        if: always()
        run: ./scripts/ci/ci_fix_fs.sh
      - uses: actions/upload-artifact@v3.1.1
        continue-on-error: true
        with:
          name: fdroid-metadata-dry-run
          path: outputs/fdroid

  all-green-requirement:
    needs: [static-checks, linters, app-all-sdks-tests, app-tests-shards, app-less-tests, deploy-dry-run, verify-all-addons, js-checks]
    runs-on: ubuntu-22.04
    steps:
      - name: ready
        run: echo "DONE"

  deploy-request:
    if: github.event_name == 'push'
    needs: [all-green-requirement]
    runs-on: ubuntu-22.04
    container: ghcr.io/menny/android_base:1.19.0
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: ./.github/actions/deploy-request
        name: request-new-deploys
        with:
          sha: ${{ github.sha }}
          ref: ${{ github.ref }}
          new_deploy: true
          api_username: ${{ secrets.BOT_MASTER_RW_GITHUB_USERNAME }}
          api_token: ${{ secrets.BOT_MASTER_RW_GITHUB_TOKEN }}

  merge-to-main:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-branch-')
    needs: [all-green-requirement]
    runs-on: ubuntu-22.04
    container: ghcr.io/menny/android_base:1.19.0
    steps:
      - uses: actions/checkout@v3.5.0
        with:
          token: ${{ secrets.BOT_MASTER_RW_GITHUB_TOKEN }}
          fetch-depth: 0
          ref: main
      - name: create-merge-commit
        run: ./scripts/ci/ci_merge_to_default_branch.sh ${{ github.ref }}
      - name: Create pull request
        uses: peter-evans/create-pull-request@v5.0.1
        with:
          token: ${{ secrets.BOT_MASTER_RW_GITHUB_TOKEN }}
          commit-message: 'Merge to default branch from ${{ github.ref }}.'
          title: 'Automated Merge to default branch from ${{ github.ref }}'
          committer: 'Polyglot <ask@evendanan.net>'
          author: 'Polyglot <ask@evendanan.net>'
          body: 'Generated from commit ${{ github.sha }} on ${{ github.ref }}.'
          team-reviewers: maintainers
          branch: 'bot-pr/merge-to-default-branch-from-${{ github.ref }}'
          base: main
          delete-branch: true
