import java.time.DayOfWeek
import java.time.Instant

apply plugin: 'anysoftkeyboard-deployment'

// If halting deployments is needed, create a file named 'halt_deployment_marker' in this module
// and write the reason for halting in the file
File haltDeploymentFile = project.file('halt_deployment_marker')

String skipDeploymentReason = ""
if (haltDeploymentFile.exists()) {
    if (haltDeploymentFile.length() == 0 || haltDeploymentFile.readLines()
            .stream()
            .map { l -> l.trim() }
            .allMatch { l -> l.empty }) {
        throw new IllegalStateException("${haltDeploymentFile.name} marker file must contain a reason.")
    }
    skipDeploymentReason = "****** NOTE: Marker file '${haltDeploymentFile.name}' found. Skipping. Reason: '${haltDeploymentFile.text.trim()}'"
    println(skipDeploymentReason);
}

deployments {
    imeMaster {
        environmentSteps = ['alpha_100', 'beta_100']
    }
    imeProduction {
        environmentSteps = ['production_010', 'production_020', 'production_030', 'production_040', 'production_050', 'production_075', 'production_100']
    }

    addOnsMaster {
        environmentSteps = ['beta_100']
    }
    addOnsProduction {
        environmentSteps = ['production_010', 'production_050', 'production_100']
    }
}

// start - IME
def imeOnMasterPush = tasks.register("imeOnMasterPush").configure {
    it.group "Publishing"
    it.description "Deployment request on master push for IME"
    it.dependsOn tasks.named("deploymentRequest_imeMaster_alpha_100")
}

def imePromoteMaster = tasks.register("imePromoteMaster").configure {
    it.group "Publishing"
    it.description "Deployment promoting request on master for IME"
    //promoting ime only on Wednesday
    def shouldPromote = Instant.now().toCalendar().toDayOfWeek() == DayOfWeek.WEDNESDAY
    it.onlyIf { shouldPromote }
    if (shouldPromote) {
        it.dependsOn tasks.named("deploymentRequest_imeMaster_beta_100")
    }
}
//TODO: release branch flows
// end - IME

// start - addons
def addOnsOnMasterPush = tasks.register("addOnsOnMasterPush").configure {
    it.group "Publishing"
    it.description "Deployment request on master push for all addons"
    it.dependsOn tasks.named("deploymentRequest_addOnsMaster_beta_100")
}

def addOnsPromoteMaster = tasks.register("addOnsPromoteMaster").configure {
    it.group 'Publishing'
    it.description 'NO-OP: Deployment request on master push for all addons'
}
//TODO: release branch flows
// end - addons

tasks.register('deploymentRequestProcess').configure {
    it.group = 'Publishing'
    it.description = 'Performs the required deployment flow'
    String ref = project.findProperty('Request.ref')
    String newDeploy = project.findProperty('Request.new_deploy')

    if (!skipDeploymentReason.empty) {
        println(skipDeploymentReason);
    } else {
        if (ref != null && newDeploy != null) {
            def imeDeploy
            def addOnsDeploy
            if (ref == 'master' || ref == 'refs/heads/master') {
                if (newDeploy == 'true') {
                    imeDeploy = imeOnMasterPush
                    addOnsDeploy = addOnsOnMasterPush
                } else if (newDeploy == 'false') {
                    imeDeploy = imePromoteMaster
                    addOnsDeploy = addOnsPromoteMaster
                }
            }

            if (imeDeploy == null || addOnsDeploy == null) {
                throw new IllegalStateException("Deployment flow for ref ${ref} and new-deploy ${newDeploy}.")
            }

            it.dependsOn imeDeploy, addOnsDeploy
        }
    }
}
