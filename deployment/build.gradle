import java.time.DayOfWeek
import java.time.Duration
import java.time.Instant

apply plugin: 'anysoftkeyboard-deployment'

// If halting deployments is needed, create a file named 'halt_deployment_marker' in this module
// and write the reason for halting in the file
File haltDeploymentFile = project.file('halt_deployment_marker')

String skipDeploymentReason = ""
if (haltDeploymentFile.exists()) {
    if (haltDeploymentFile.length() == 0 || haltDeploymentFile.readLines()
            .stream()
            .map { l -> l.trim() }
            .allMatch { l -> l.empty }) {
        throw new IllegalStateException("${haltDeploymentFile.name} marker file must contain a reason.")
    }
    skipDeploymentReason = "****** NOTE: Marker file '${haltDeploymentFile.name}' found. Skipping. Reason: '${haltDeploymentFile.text.trim()}'"
    println(skipDeploymentReason);
}

deployments {
    imeMaster {
        environmentSteps = ['alpha_100', 'beta_100']
    }
    imeProduction {
        environmentSteps = ['production_010', '', 'production_020', '', '', 'production_030', 'production_040', 'production_050', '', '', '', 'production_075', '', 'production_100']
    }

    addOnsMaster {
        environmentSteps = ['beta_100']
    }
    addOnsProduction {
        environmentSteps = ['production_010', '', 'production_050', '', 'production_100']
    }
}

long getDaysFromLastCommitFromGit() {
    def epochOfLastCommit = "git show -s --format=%ct HEAD".execute().text.toLong() * 1000L
    println("epochOfLastCommit is ${epochOfLastCommit}")
    Instant now = Instant.now()
    Instant timeOfLastCommit = Instant.ofEpochMilli(epochOfLastCommit)
    println("now: ${now}, timeOfLastCommit: ${timeOfLastCommit}")
    Duration diff = Duration.between(timeOfLastCommit, now)
    println("diff is ${diff}, days ${diff.toDays()}")
    return diff.toDays()
}

static String getTaskNameByStepFor(Project project, String processName, long step) {
    def processSteps = project.deployments.named(processName).get().environmentSteps
    if (step >= processSteps.size()) {
        return 'noOpDeployTask'
    }
    def targetEnvironment = processSteps[step]
    if (targetEnvironment == '') {
        return 'noOpDeployTask'
    }
    return "deploymentRequest_${processName}_${targetEnvironment}"
}

//////// start - IME
//master
def imeOnMasterPush = tasks.register("imeOnMasterPush") {
    it.group "Publishing"
    it.description "Deployment request on master push for IME"
    it.dependsOn tasks.named(getTaskNameByStepFor(it.project, "imeMaster", 0))
}

def imePromoteMaster = tasks.register("imePromoteMaster") {
    it.group "Publishing"
    it.description "Deployment promoting request on master for IME"
    //promoting ime only on Wednesday
    def shouldPromote = Instant.now().toCalendar().toDayOfWeek() == DayOfWeek.WEDNESDAY
    it.onlyIf { shouldPromote }
    if (shouldPromote) {
        it.dependsOn tasks.named(getTaskNameByStepFor(it.project, "imeMaster", 1))
    }
}

//release-branch
def imeOnReleasePush = tasks.register("imeOnReleasePush") {
    it.group "Publishing"
    it.description "Deployment request on release-branch push for IME"
    it.dependsOn tasks.named(getTaskNameByStepFor(it.project, "imeProduction", 0))
}

def imePromoteRelease = tasks.register("imePromoteRelease") {
    it.group "Publishing"
    it.description "Deployment promoting request on release-branch for IME"
    //promoting one step every day
    def days = getDaysFromLastCommitFromGit()
    it.onlyIf { days > 0 }
    if (days > 0) {
        it.dependsOn tasks.named(getTaskNameByStepFor(it.project, "imeProduction", days))
    }
}
//////// end - IME
def noOpTask = tasks.register("noOpDeployTask")

//////// start - addons
// master
def addOnsOnMasterPush = tasks.register("addOnsOnMasterPush") {
    it.group "Publishing"
    it.description "Deployment request on master push for all addons"
    it.dependsOn tasks.named(getTaskNameByStepFor(it.project, "addOnsMaster", 0))
}

def addOnsPromoteMaster = tasks.register("addOnsPromoteMaster") {
    it.group 'Publishing'
    it.description 'NO-OP: Deployment request on master push for all addons'
}


//release-branch
def addOnsOnReleasePush = tasks.register("addOnsOnReleasePush") {
    it.group "Publishing"
    it.description "Deployment request on release-branch push for addons"
    it.dependsOn tasks.named(getTaskNameByStepFor(it.project, "addOnsProduction", 0))
}

def addOnsPromoteRelease = tasks.register("addOnsPromoteRelease") {
    it.group "Publishing"
    it.description "Deployment promoting request on release-branch for addons"
    //promoting one step every day
    def days = getDaysFromLastCommitFromGit()
    it.onlyIf { days > 0 }
    if (days > 0) {
        it.dependsOn tasks.named(getTaskNameByStepFor(it.project, "addOnsProduction", days))
    }
}
//////// end - addons

tasks.register('deploymentRequestProcess').configure {
    it.group = 'Publishing'
    it.description = 'Performs the required deployment flow'
    String ref = project.findProperty('Request.ref')
    String newDeploy = project.findProperty('Request.new_deploy')

    if (!skipDeploymentReason.empty) {
        println(skipDeploymentReason);
    } else {
        if (imeOnMasterPush == null) throw new NullPointerException("imeOnMasterPush")
        if (addOnsOnMasterPush == null) throw new NullPointerException("addOnsOnMasterPush")
        if (imePromoteMaster == null) throw new NullPointerException("imePromoteMaster")
        if (addOnsPromoteMaster == null) throw new NullPointerException("addOnsPromoteMaster")

        if (ref != null && newDeploy != null) {
            def imeDeploy
            def addOnsDeploy
            ref = ref.replace('refs/heads/', '')
            if (ref == 'master') {
                println('deploy-request from master branch')
                if (newDeploy == 'true') {
                    println('deploy-request for a new deploy')
                    imeDeploy = imeOnMasterPush
                    addOnsDeploy = addOnsOnMasterPush
                } else if (newDeploy == 'false') {
                    println('deploy-request for a promote')
                    imeDeploy = imePromoteMaster
                    addOnsDeploy = addOnsPromoteMaster
                }
            } else if (ref.matches('release-branch-ime-v.+')) {
                println('deploy-request from ime release branch')
                if (newDeploy == 'true') {
                    println('deploy-request for a new deploy')
                    imeDeploy = imeOnReleasePush
                    addOnsDeploy = noOpTask
                } else if (newDeploy == 'false') {
                    println('deploy-request for a promote')
                    imeDeploy = imePromoteRelease
                    addOnsDeploy = noOpTask
                }
            } else if (ref.matches('release-branch-addons-v.+')) {
                println('deploy-request from addons release branch')
                if (newDeploy == 'true') {
                    println('deploy-request for a new deploy')
                    imeDeploy = noOpTask
                    addOnsDeploy = addOnsOnReleasePush
                } else if (newDeploy == 'false') {
                    println('deploy-request for a promote')
                    imeDeploy = noOpTask
                    addOnsDeploy = addOnsPromoteRelease
                }
            }

            if (imeDeploy == null || addOnsDeploy == null) {
                throw new IllegalStateException("Deployment flow for ref '${ref}' and new-deploy '${newDeploy}'.")
            }

            it.dependsOn imeDeploy, addOnsDeploy
        }
    }
}
