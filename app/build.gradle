group 'net.evendanan'

apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'

apply from: "${rootDir}/gradle/android_general.gradle"

android {
    defaultConfig {
        applicationId 'com.menny.android.anysoftkeyboard'
        versionCode rootProject.autoVersioning.versionData.versionCode
        versionName rootProject.autoVersioning.versionData.versionName

        println "Building AnySoftKeyboard ${versionName} (or ${project.version}), code ${versionCode}."

        //adding additional fields to the BuildConfig class.
        String support_email_address = System.getenv("ANYSOFTKEYBOARD_CRASH_REPORT_EMAIL")
        println 'crash report email is: ' + support_email_address

        buildConfigField "String", "CRASH_REPORT_EMAIL_ADDRESS", '"' + support_email_address + '"'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            if (file("/tmp/anysoftkeyboard.keystore").exists()) {
                storeFile file("/tmp/anysoftkeyboard.keystore")
                storePassword System.getenv("ANYSOFTKEYBOARD_KEYSTORE_PASSWORD")
                keyAlias System.getenv("ANYSOFTKEYBOARD_KEYSTORE_ALIAS")
                keyPassword System.getenv("ANYSOFTKEYBOARD_KEYSTORE_KEY_PASSWORD")
                println "Using 'anysoftkeyboard.keystore' to release APK (with alias '${keyAlias}')."
            } else {
                println "Could not find 'anysoftkeyboard.keystore' file. Can not sign release APK with release keystore! Using debug."
                initWith signingConfigs.debug
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            zipAlignEnabled true
            debuggable false

            minifyEnabled true
            proguardFiles 'proguard-android-optimize.txt', 'proguard-rules.txt', 'proguard-anysoftkeyboard.txt'
        }

        debug {
            testCoverageEnabled true
        }

        canary {
            initWith buildTypes.release

            matchingFallbacks = ['release', 'debug']
        }
    }
}

//adding TESTING_BUILD
android {
    buildTypes {
        release {
            buildConfigField("boolean", "TESTING_BUILD", "false")
        }

        debug {
            buildConfigField("boolean", "TESTING_BUILD", "true")
        }

        canary {
            buildConfigField("boolean", "TESTING_BUILD", "true")
        }
    }
}

play {
    track = System.getProperty('deployChannel', 'alpha')
    serviceAccountEmail = System.getenv().getOrDefault('PUBLISH_APK_SERVICE_ACCOUNT_EMAIL', 'dummy@example.com')
    serviceAccountCredentials = file('/tmp/apk_upload_key.p12')
}

//verifying release-notes file
File playStoreWhatsNewFile = file("${project.projectDir}/src/main/play/release-notes/en-US/${System.getProperty('deployChannel', 'alpha')}.txt")
if (!playStoreWhatsNewFile.exists()) {
    throw new FileNotFoundException("Can not find whatsnew file for Play-Store upload!")
}

if (playStoreWhatsNewFile.text.length() > 500) {
    println("Locale " + Locale.getDefault())
    println("file encoding " + CharsetToolkit.defaultSystemCharset)
    println("File contents:")
    println("***" +  playStoreWhatsNewFile.text + "***")
    throw new IllegalStateException("whatsnew file can not be longer than 500 characters! Currently " + playStoreWhatsNewFile.text.length())
}

dependencies {
    implementation "com.anysoftkeyboard.language.english:english:$askExternalAddOnsVersion"
    implementation "com.anysoftkeyboard:base:$askExternalAddOnsVersion"
    implementation project(':base')
    implementation project(':base-rx')
    implementation project(':nextword')
    implementation project(':dictionaries')
    implementation project(':jnidictionaryv1')
    implementation project(':jnidictionaryv2')
    implementation project(':prefs')
    implementation project(':overlay')
    implementation project(':pixel')
    implementation project(':remote')

    implementation "com.android.support:support-fragment:$supportLibVersion"
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:support-v13:$supportLibVersion"
    implementation "com.android.support:recyclerview-v7:$supportLibVersion"
    implementation "com.android.support:cardview-v7:$supportLibVersion"
    implementation "com.android.support:support-annotations:$supportLibVersion"
    implementation "com.android.support:palette-v7:$supportLibVersion"
    implementation "com.android.support:preference-v7:$supportLibVersion"
    implementation "com.android.support:design:$supportLibVersion"
    implementation 'com.jpardogo.materialtabstrip:library:1.1.0'
    implementation 'com.github.karczews:rx2-broadcast-receiver:1.0.5'
    implementation('com.github.menny.Chauffeur:permissions:0.1.1') {
        exclude group: 'com.android.support'
    }

    testImplementation project(path: ':base-test')
    testImplementation 'com.github.triplet.simpleprovider:simpleprovider:1.1.0'
}
