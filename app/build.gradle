group 'net.evendanan'

buildscript {
    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://jitpack.io' }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.github.menny:GradleVersion:0.0.3'
    }
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.github.triplet.play'
apply plugin: 'checkstyle'
apply plugin: 'net.evendanan.versiongenerator'

def generators = [
        new net.evendanan.versiongenerator.generators.EnvBuildVersionGenerator.CircleCi(1650/*adding to version*/, /*decrementing due to minor*/-2575),
        new net.evendanan.versiongenerator.generators.GitBuildVersionGenerator(-2268, -2186),
        new net.evendanan.versiongenerator.generators.StaticVersionGenerator()
]

def versionData = versionGenerator.generateVersion(1, 9, 0, generators)

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply from: "${rootProject.projectDir.absolutePath}/jacoco.gradle"
android {
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }

    compileSdkVersion sdkCompileVersion
    buildToolsVersion androidBuildTools

    defaultConfig {
        applicationId 'com.menny.android.anysoftkeyboard'
        versionCode versionData.versionCode
        versionName versionData.versionName

        println "Building AnySoftKeyboard ${versionData.versionName} (or ${project.version}), code ${versionData.versionCode}."

        minSdkVersion sdkMinimumVersion
        targetSdkVersion sdkTargetVersion

        //adding additional fields to the BuildConfig class.
        def String support_email_address = System.getenv("ANYSOFTKEYBOARD_CRASH_REPORT_EMAIL")
        println 'crash report email is: ' + support_email_address

        buildConfigField "String", "CRASH_REPORT_EMAIL_ADDRESS", '"' + support_email_address + '"'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            if (file("/tmp/anysoftkeyboard.keystore").exists()) {
                storeFile file("/tmp/anysoftkeyboard.keystore")
                storePassword System.getenv("UPLOAD_ANYSOFTKEYBOARD_KEYSTORE_PASSWORD")
                keyAlias System.getenv("UPLOAD_ANYSOFTKEYBOARD_KEYSTORE_ALIAS")
                keyPassword System.getenv("UPLOAD_ANYSOFTKEYBOARD_KEYSTORE_KEY_PASSWORD")
                println "Using 'anysoftkeyboard.keystore' to release APK (with alias '${keyAlias}')."
            } else {
                println "Could not find 'anysoftkeyboard.keystore' file. Can not sign release APK."
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            zipAlignEnabled true
            debuggable false

            minifyEnabled true
            proguardFiles 'proguard-android-optimize.txt', 'proguard-rules.txt'

            ext.enableCrashlytics = false

            buildConfigField("boolean", "TESTING_BUILD", "false")
        }

        debug {
            testCoverageEnabled true

            ext.enableCrashlytics = false
            buildConfigField("boolean", "TESTING_BUILD", "true")
        }

        canary {
            signingConfig signingConfigs.release
            zipAlignEnabled true
            debuggable false

            minifyEnabled true
            proguardFiles 'proguard-android-optimize.txt', 'proguard-rules.txt'

            ext.enableCrashlytics = true
            buildConfigField("boolean", "TESTING_BUILD", "true")

            matchingFallbacks = ['release', 'debug']
        }
    }

    testOptions {
        unitTests.all {
            maxParallelForks = 2

            testLogging {
                if (System.getenv().containsKey("CIRCLE_BUILD_NUM")) {
                    events TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.STARTED, TestLogEvent.PASSED
                } else {
                    events TestLogEvent.FAILED, TestLogEvent.SKIPPED
                }

                exceptionFormat TestExceptionFormat.FULL

                showCauses true
                showExceptions true
                showStackTraces true
            }

            systemProperties['TestsGroupingFilter_TEST_GROUP_TO_EXECUTE_SYSTEM_PROPERTY_KEY'] = System.getenv().getOrDefault('TEST_GROUP_INDEX', 0);
            systemProperties['TestsGroupingFilter_TEST_GROUPS_COUNT_SYSTEM_PROPERTY_KEY'] = System.getenv().getOrDefault('TEST_GROUPS_COUNT', 1);

            systemProperties['java.awt.headless'] = true
            systemProperties['robolectric.logging'] = 'stderr'
            systemProperties['robolectric.logging.enabled'] = true
        }
    }

    lintOptions {
        lintConfig file("${projectDir}/lint/lint.xml")
    }

    aaptOptions {
        additionalParameters '--utf16'
    }
}

play {
    track = 'alpha'
    serviceAccountEmail = System.getenv("PUBLISH_APK_SERVICE_ACCOUNT_EMAIL")
    pk12File = file('/tmp/apk_upload_key.p12')
    uploadImages = false
}

//verifying whatsnew file
File playStoreWhatsNewFile = file("${project.projectDir}/src/main/play/en-US/whatsnew")
if (!playStoreWhatsNewFile.exists()) {
    throw new FileNotFoundException("Can not find whatsnew file for Play-Store upload!")
}

if (playStoreWhatsNewFile.text.length() > 500) {
    println("Locale " + Locale.getDefault())
    println("file encoding " + CharsetToolkit.defaultSystemCharset)
    throw new IllegalStateException("whatsnew file can not be longer than 500 characters! Currently " + playStoreWhatsNewFile.text.length())
}

task checkstyle(type: Checkstyle) {
    configFile file("${projectDir}/checkstyle/checkstyle.xml")
    source 'src'
    classpath = files()
}

dependencies {
    implementation project(':base')
    implementation project(':nextword')
    implementation project(':jnidictionaryv1')
    implementation project(':jnidictionaryv2')

    implementation "com.github.AnySoftKeyboard:AnySoftKeyboard-API:$AnySoftKeyboardApiVersion"
    implementation "com.android.support:support-fragment:$supportLibVersion"
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:recyclerview-v7:$supportLibVersion"
    implementation "com.android.support:support-annotations:$supportLibVersion"
    implementation "com.android.support:palette-v7:$supportLibVersion"
    implementation 'com.jpardogo.materialtabstrip:library:1.1.0'
    implementation('com.github.menny.Chauffeur:permissions:118539bb4cde0420928d60766dd0fdac9be9c6ba') {
        exclude group: 'com.android.support'
    }
    implementation fileTree(dir: 'libs', include: '*.jar')

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.4.2'
    testImplementation 'org.robolectric:supportv4:3.4.2'
    testImplementation 'org.mockito:mockito-core:1.9.5'
    testImplementation 'com.github.menny:JUnitTestsGrouping:0.1.0'
    canaryImplementation('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    canaryImplementation('com.crashlytics.sdk.android:crashlytics-ndk:1.1.5@aar') {
        transitive = true
    }
}

crashlytics {
    enableNdk true
    androidNdkOut 'src/main/obj'
    androidNdkLibsOut 'src/main/libs'
}
