"Declare dependencies for bzlmod, see https://bazel.build/build/bzlmod"

# We declare all of the direct dependencies of all of the code in this
# workspace. A single version of each of these is declared, implying that all of
# the code will use the same version of all of these tools and libraries listed.
# For bzlmod dependencies, this implements the "single version policy".

bazel_dep(name = "aspect_bazel_lib", version = "2.9.4")
bazel_dep(name = "rules_nodejs", version = "6.3.5")
bazel_dep(name = "aspect_rules_js", version = "2.1.2")
bazel_dep(name = "aspect_rules_ts", version = "3.6.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "aspect_rules_esbuild", version = "0.21.0")
bazel_dep(name = "rules_multitool", version = "1.3.0")
bazel_dep(name = "rules_java", version = "8.6.3")
bazel_dep(name = "contrib_rules_jvm", version = "0.28.0")
bazel_dep(name = "rules_jvm_external", version = "6.7")

# PATCHES
single_version_override(
    module_name = "rules_nodejs",
    patch_strip = 1,
    patches = [
        "//tools/repo_patches:rules_nodejs_pr_3802.patch",
    ],
    version = "6.3.5",
)

multitool = use_extension("@rules_multitool//multitool:extension.bzl", "multitool")
multitool.hub(lockfile = "//tools:multitool.lock.json")
use_repo(multitool, "multitool")

register_toolchains("@multitool//toolchains:all")

#########################
# JavaScript and TypeScript
# https://github.com/aspect-build/rules_js/tree/main/e2e/bzlmod
# https://github.com/aspect-build/rules_ts/tree/main/e2e/bzlmod

# In keeping with the single version policy, in this example, the NPM ecosystem
# dependencies are specified at the top level rather than in each sub-project.
# However, it is possible to have multiple different sets of NPM dependencies
# across a workspace.

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(
    name = "nodejs",
    node_version_from_nvmrc = "//:.nvmrc",
    # calculate SHA256 with curl https://nodejs.org/dist/v{version}/{filename} | shasum -a 256
    # `curl https://nodejs.org/dist/v23.11.0/node-v23.11.0-darwin-arm64.tar.gz | shasum -a 256`
    node_versions = {
        "24.7.0-darwin_arm64": ("node-v24.7.0-darwin-arm64.tar.gz", "node-v24.7.0-darwin-arm64", "ff8298faaf82c85444aad7f1e12a4882496286ea9008702029b359d7fac7f8b3"),
        "24.7.0-darwin_amd64": ("node-v24.7.0-darwin-x64.tar.gz", "node-v24.7.0-darwin-x64", "b99548ef56ec86da2ce50eff041d97e14077b77b517c4bcce0925d14c26cbee3"),
        "24.7.0-linux_arm64": ("node-v24.7.0-linux-arm64.tar.xz", "node-v24.7.0-linux-arm64", "3c238d671b2cc2e1c62b8b068c346b9830708f90df1e4a37305f4a5c2bb230b8"),
        "24.7.0-linux_amd64": ("node-v24.7.0-linux-x64.tar.xz", "node-v24.7.0-linux-x64", "2fb405154d017f04d21b3d2273cc1cdfa824cfeffbd4225976454d06d5e381a4"),
        "18.20.8-darwin_arm64": ("node-v18.20.8-darwin-arm64.tar.gz", "node-v18.20.8-darwin-arm64", "bae4965d29d29bd32f96364eefbe3bca576a03e917ddbb70b9330d75f2cacd76"),
        "18.20.8-darwin_amd64": ("node-v18.20.8-darwin-x64.tar.gz", "node-v18.20.8-darwin-x64", "ed2554677188f4afc0d050ecd8bd56effb2572d6518f8da6d40321ede6698509"),
        "18.20.8-linux_arm64": ("node-v18.20.8-linux-arm64.tar.xz", "node-v18.20.8-linux-arm64", "224e569dbe7b0ea4628ce383d9d482494b57ee040566583f1c54072c86d1116b"),
        "18.20.8-linux_amd64": ("node-v18.20.8-linux-x64.tar.xz", "node-v18.20.8-linux-x64", "5467ee62d6af1411d46b6a10e3fb5cacc92734dbcef465fea14e7b90993001c9"),
    },
)
use_repo(
    node,
    "nodejs_toolchains",
)

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to get a local node_modules tree, using
# bazel run -- @pnpm//:pnpm --dir $PWD install
use_repo(pnpm, "pnpm")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
)
use_repo(npm, "npm")

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
)
rules_ts_ext.deps(
    ts_integrity = "sha512-jl1vZzPDinLr9eUt3J/t7V6FgNEw9QjvBPdysz9KfQDD41fQrC2Y4vKQdiaUpFT4bXlb1RHhLpp8wtm6M5TgSw==",
    # This keeps the TypeScript version in-sync with the editor, which is typically best.
    ts_version_from = "//:package.json",
)
use_repo(rules_ts_ext, "npm_typescript")

bazel_dep(name = "aspect_rules_lint", version = "1.0.7")
bazel_dep(name = "buildifier_prebuilt", version = "7.3.1")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "maven",
    artifacts = [
        "org.junit.jupiter:junit-jupiter-api:5.8.2",
        "org.junit.jupiter:junit-jupiter-engine:5.8.2",
        "org.junit.platform:junit-platform-launcher:1.8.2",
        "org.junit.platform:junit-platform-reporting:1.8.2",
    ],
    fetch_sources = True,
    lock_file = "//:maven_install.json",
)
use_repo(
    maven,
    "maven",
)
